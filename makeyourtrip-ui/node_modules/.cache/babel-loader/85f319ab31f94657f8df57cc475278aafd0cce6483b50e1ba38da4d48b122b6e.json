{"ast":null,"code":"var assert = require('assert');\nmodule.exports = compare;\nfunction compare(a, b) {\n  a = hexToBinary(a);\n  b = hexToBinary(b);\n  assert.equal(a.length, b.length, 'Argument must have equal lengths.');\n  return hammingDistance(a, b);\n}\nvar lookup = {\n  '0': '0000',\n  '1': '0001',\n  '2': '0010',\n  '3': '0011',\n  '4': '0100',\n  '5': '0101',\n  '6': '0110',\n  '7': '0111',\n  '8': '1000',\n  '9': '1001',\n  'a': '1010',\n  'b': '1011',\n  'c': '1100',\n  'd': '1101',\n  'e': '1110',\n  'f': '1111',\n  'A': '1010',\n  'B': '1011',\n  'C': '1100',\n  'D': '1101',\n  'E': '1110',\n  'F': '1111'\n};\nfunction hexToBinary(s) {\n  if (Buffer.isBuffer(s)) s = s.toString('hex');\n  s = s.replace(/^0x/, '');\n  assert(/^[0-9a-fA-F]+$/.test(s));\n  var ret = '';\n  for (var i = 0; i < s.length; i++) ret += lookup[s[i]];\n  return ret;\n}\nfunction hammingDistance(a, b) {\n  a = hexToBinary(a);\n  b = hexToBinary(b);\n  var count = 0;\n  for (var i = 0; i < a.length; i++) if (a[i] !== b[i]) count++;\n  return count;\n}","map":{"version":3,"names":["assert","require","module","exports","compare","a","b","hexToBinary","equal","length","hammingDistance","lookup","s","Buffer","isBuffer","toString","replace","test","ret","i","count"],"sources":["E:/big_bang_assesment_tourism/makeyourtrip-ui/node_modules/hamming-distance/index.js"],"sourcesContent":["\nvar assert = require('assert');\n\nmodule.exports = compare;\n\nfunction compare(a, b) {\n  a = hexToBinary(a)\n  b = hexToBinary(b)\n  assert.equal(a.length, b.length, 'Argument must have equal lengths.');\n  return hammingDistance(a, b);\n}\n\nvar lookup = {\n  '0': '0000',\n  '1': '0001',\n  '2': '0010',\n  '3': '0011',\n  '4': '0100',\n  '5': '0101',\n  '6': '0110',\n  '7': '0111',\n  '8': '1000',\n  '9': '1001',\n  'a': '1010',\n  'b': '1011',\n  'c': '1100',\n  'd': '1101',\n  'e': '1110',\n  'f': '1111',\n  'A': '1010',\n  'B': '1011',\n  'C': '1100',\n  'D': '1101',\n  'E': '1110',\n  'F': '1111'\n};\n\nfunction hexToBinary(s) {\n  if (Buffer.isBuffer(s)) s = s.toString('hex');\n  s = s.replace(/^0x/, '');\n  assert(/^[0-9a-fA-F]+$/.test(s));\n  var ret = '';\n  for (var i = 0; i < s.length; i++) ret += lookup[s[i]];\n  return ret;\n}\n\nfunction hammingDistance(a, b) {\n  a = hexToBinary(a);\n  b = hexToBinary(b);\n  var count = 0;\n  for (var i = 0; i < a.length; i++) if (a[i] !== b[i]) count++;\n  return count;\n}\n"],"mappings":"AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE9BC,MAAM,CAACC,OAAO,GAAGC,OAAO;AAExB,SAASA,OAAOA,CAACC,CAAC,EAAEC,CAAC,EAAE;EACrBD,CAAC,GAAGE,WAAW,CAACF,CAAC,CAAC;EAClBC,CAAC,GAAGC,WAAW,CAACD,CAAC,CAAC;EAClBN,MAAM,CAACQ,KAAK,CAACH,CAAC,CAACI,MAAM,EAAEH,CAAC,CAACG,MAAM,EAAE,mCAAmC,CAAC;EACrE,OAAOC,eAAe,CAACL,CAAC,EAAEC,CAAC,CAAC;AAC9B;AAEA,IAAIK,MAAM,GAAG;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE,MAAM;EACX,GAAG,EAAE;AACP,CAAC;AAED,SAASJ,WAAWA,CAACK,CAAC,EAAE;EACtB,IAAIC,MAAM,CAACC,QAAQ,CAACF,CAAC,CAAC,EAAEA,CAAC,GAAGA,CAAC,CAACG,QAAQ,CAAC,KAAK,CAAC;EAC7CH,CAAC,GAAGA,CAAC,CAACI,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EACxBhB,MAAM,CAAC,gBAAgB,CAACiB,IAAI,CAACL,CAAC,CAAC,CAAC;EAChC,IAAIM,GAAG,GAAG,EAAE;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,CAAC,CAACH,MAAM,EAAEU,CAAC,EAAE,EAAED,GAAG,IAAIP,MAAM,CAACC,CAAC,CAACO,CAAC,CAAC,CAAC;EACtD,OAAOD,GAAG;AACZ;AAEA,SAASR,eAAeA,CAACL,CAAC,EAAEC,CAAC,EAAE;EAC7BD,CAAC,GAAGE,WAAW,CAACF,CAAC,CAAC;EAClBC,CAAC,GAAGC,WAAW,CAACD,CAAC,CAAC;EAClB,IAAIc,KAAK,GAAG,CAAC;EACb,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,CAAC,CAACI,MAAM,EAAEU,CAAC,EAAE,EAAE,IAAId,CAAC,CAACc,CAAC,CAAC,KAAKb,CAAC,CAACa,CAAC,CAAC,EAAEC,KAAK,EAAE;EAC7D,OAAOA,KAAK;AACd"},"metadata":{},"sourceType":"script","externalDependencies":[]}